#!/bin/sh

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

# shellcheck disable=SC2016
append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

case "$SHELL" in
  */zsh) : ;;
  *)
    fancy_echo "Changing your shell to zsh ..."
      # Make sure shell exists in /etc/shells before changing
      zsh_path=$(which zsh)
      grep -q -F $zsh_path /etc/shells || echo $zsh_path | sudo tee -a /etc/shells
      chsh -s "$zsh_path"
    ;;
esac

brew_install_or_upgrade() {
  if brew_is_installed "$1"; then
    if brew_is_upgradable "$1"; then
      brew upgrade "$@"
    fi
  else
    brew install "$@"
  fi
}

brew_is_installed() {
  local name
  name="$(brew_expand_alias "$1")"

  brew list -1 | grep -Fqx "$name"
}

brew_is_upgradable() {
  local name
  name="$(brew_expand_alias "$1")"

  ! brew outdated --quiet "$name" >/dev/null
}

brew_expand_alias() {
  brew info "$1" 2>/dev/null | head -1 | awk '{gsub(/.*\//, ""); gsub(/:/, ""); print $1}'
}

brew_launchctl_restart() {
  local name
  name="$(brew_expand_alias "$1")"
  local domain="homebrew.mxcl.$name"
  local plist="$domain.plist"

  mkdir -p "$HOME/Library/LaunchAgents"
  ln -sfv "/usr/local/opt/$name/$plist" "$HOME/Library/LaunchAgents"

  if launchctl list | grep -Fq "$domain"; then
    launchctl unload "$HOME/Library/LaunchAgents/$plist" >/dev/null
  fi
  launchctl load "$HOME/Library/LaunchAgents/$plist" >/dev/null
}

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
    rbenv rehash
  fi
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_zshrc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
fi

fancy_echo "Updating Homebrew formulae ..."
brew tap thoughtbot/formulae

brew update

fancy_echo "Updating Unix tools ..."
brew_install_or_upgrade 'ctags'
brew_install_or_upgrade 'git'
brew_install_or_upgrade 'nmap'
brew_install_or_upgrade 'openssl'
brew_install_or_upgrade 'rcm'
brew_install_or_upgrade 'reattach-to-user-namespace'
brew_install_or_upgrade 'ssh-copy-id'
brew_install_or_upgrade 'the_silver_searcher'
brew_install_or_upgrade 'tmux'
brew_install_or_upgrade 'tree'
brew_install_or_upgrade 'vim'
brew_install_or_upgrade 'watch'
brew_install_or_upgrade 'watchman'
brew_install_or_upgrade 'zsh'

fancy_echo "Updating Heroku tools ..."
brew_install_or_upgrade 'heroku-toolbelt'
brew_install_or_upgrade 'parity'

fancy_echo "Updating GitHub tools ..."
brew_install_or_upgrade 'hub'

fancy_echo "Updating image tools ..."
brew_install_or_upgrade 'imagemagick'

fancy_echo "Updating testing tools ..."
brew_install_or_upgrade 'qt'

fancy_echo "Updating programming languages ..."
brew_install_or_upgrade 'libyaml' # should come after openssl
brew_install_or_upgrade 'node'
brew_install_or_upgrade 'rbenv'
brew_install_or_upgrade 'ruby-build'

fancy_echo "Updating databases ..."
brew_install_or_upgrade 'postgres'
brew_install_or_upgrade 'redis'
brew_launchctl_restart 'postgresql'
brew_launchctl_restart 'redis'

fancy_echo "Configuring Ruby ..."
find_latest_ruby() {
  rbenv install -l | grep -v - | tail -1 | sed -e 's/^ *//'
}

ruby_version="$(find_latest_ruby)"
# shellcheck disable=SC2016
append_to_zshrc 'eval "$(rbenv init - --no-rehash)"' 1
eval "$(rbenv init -)"

if ! rbenv versions | grep -Fq "$ruby_version"; then
  RUBY_CONFIGURE_OPTS=--with-openssl-dir=/usr/local/opt/openssl rbenv install -s "$ruby_version"
fi

rbenv global "$ruby_version"
rbenv shell "$ruby_version"
gem update --system
gem_install_or_update 'bundler'
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

fancy_echo "Upgrading node packages ..."
npm -g install ember-cli
npm -g install bower
npm -g install phantomjs-prebuilt

# Install brew cask and install program via brew cask
brew_cask_expand_alias() {
  brew cask info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

brew_cask_is_installed() {
  local NAME=$(brew_cask_expand_alias "$1")
  brew cask list -1 | grep -Fqx "$NAME"
}

brew_cask_install() {
  if ! brew_cask_is_installed "$1"; then
    brew cask install "$@"
  fi
}

brew_cask_install_or_upgrade() {
  if brew_cask_is_installed "$1"; then
    echo "$1 is already installed, brew cask upgrade is not yet implemented"
  else
    brew cask install "$@"
  fi
}

fancy_echo "Installing essential apps from homebrew cask..."

brew_cask_install '1password'
brew_cask_install 'alfred'
brew_cask_install 'caffeine'
brew_cask_install 'couchpotato'
brew_cask_install 'dropbox'
brew_cask_install 'filebot'
brew_cask_install 'flux'
brew_cask_install 'garmin-express'
brew_cask_install 'google-chrome'
brew_cask_install 'java'
brew_cask_install 'licecap'
brew_cask_install 'moom'
brew_cask_install 'plex-media-server'
brew_cask_install 'skype'
brew_cask_install 'slack'
brew_cask_install 'spotify'
brew_cask_install 'utorrent'
brew_cask_install 'vagrant'
brew_cask_install 'virtualbox'
brew_cask_install 'vlc'

# This has to happen after cask install of virutalbox
fancy_echo "Updating docker ..."
brew_install_or_upgrade 'docker'
brew_install_or_upgrade 'docker-machine'
brew_install_or_upgrade 'docker-compose'
docker-machine ls | grep --quiet "^default" || docker-machine create --driver virtualbox default

fancy_echo "Configuring OSX ..."

# Trackpad: enable tap to click for this user and for the login screen
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

# Finder: show all filename extensions
defaults write NSGlobalDomain AppleShowAllExtensions -bool true

# When performing a search, search the current folder by default
defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

# Set a blazingly fast keyboard repeat rate
defaults write NSGlobalDomain KeyRepeat -int 0

# Increase sound quality for Bluetooth headphones/headsets
defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 40

# Hide dock
osascript -e "tell application \"System Events\" to set the autohide of the dock preferences to true"

fancy_echo "Setting up dotfiles ..."
if [ -d ~/.dotfiles ]; then
  cd ~/.dotfiles &&
    git stash save "temp stash while running mac setup script" &&
    git pull origin master &&
    git stash list | grep -q "temp stash while running mac setup script" &&
    git stash pop
else
  git clone https://github.com/gar/dotfiles ~/.dotfiles
fi
yes | rcup

fancy_echo "Finished setting up mac, but you may want to do some of the following manually"
fancy_echo "  - Change caps-lock to ctrl key"
fancy_echo "  - Change the terminal theme"
fancy_echo "  - enable licences for alfred, moom"
fancy_echo "  - configure keyboard shortcuts for spotlight, alfred, moom"
fancy_echo "  - set display arrangments/alignment as needed"
